import { Telegraf } from 'telegraf';
import dayjs from 'dayjs';
import { KeyboardBuilder } from '../components/keyboard';
import { matchTransactions, getUserMatches, getAllMatches, getUsersWithMatchStats, getUserById } from '../../services/matching-service';
import type { BotContext } from '@/types';

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –¥–∞—Ç (–¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
interface DateRange {
  startDate: string | null;
  endDate: string | null;
}

const dateRanges: Record<string, DateRange> = {};

export class MatchHandler {
  static init(bot: Telegraf<BotContext>) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é –º—ç—Ç—á–µ–π"
    bot.hears('üìã –ú–µ–Ω—é –º—ç—Ç—á–µ–π', async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.reply('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      await ctx.reply(
        '–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ç—Ç—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        KeyboardBuilder.matchMenu()
      );
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞"
    bot.hears('üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞', async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.reply('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      await ctx.reply(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:',
        KeyboardBuilder.adminMainMenu()
      );
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ó–∞–º—ç—Ç—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥"
    bot.hears('üîÑ –ó–∞–º—ç—Ç—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥', async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.reply('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from!.id.toString();
      dateRanges[userId] = { startDate: null, endDate: null };
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
      ctx.session.matchAction = 'waiting_start_date';
      
      await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2023 12:00',
        KeyboardBuilder.dateRangeInputMenu()
      );
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –º—ç—Ç—á–µ–π"
    bot.hears('üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –º—ç—Ç—á–µ–π', async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.reply('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      // –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è matchAction
      delete ctx.session.matchAction;
      
      await ctx.reply(
        '–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ç—Ç—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        KeyboardBuilder.matchMenu()
      );
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –º—ç—Ç—á–µ–π"
    bot.hears('üìã –°–ø–∏—Å–æ–∫ –º—ç—Ç—á–µ–π', async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.reply('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from!.id.toString();
      dateRanges[userId] = { startDate: null, endDate: null };
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
      ctx.session.matchAction = 'list_matches_start_date';
      
      await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2023 12:00',
        KeyboardBuilder.dateRangeInputMenu()
      );
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú—ç—Ç—á–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
    bot.hears('üë• –ú—ç—Ç—á–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.reply('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userId = ctx.from!.id.toString();
      dateRanges[userId] = { startDate: null, endDate: null };
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
      ctx.session.matchAction = 'users_matches_start_date';
      
      await ctx.reply(
        '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º\n' +
        '–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2023 12:00',
        KeyboardBuilder.dateRangeInputMenu()
      );
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
    bot.action(/all_matches_page_(\d+)/, async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      const page = parseInt(ctx.match[1]);
      const userId = ctx.from!.id.toString();
      const dateRange = dateRanges[userId];
      
      if (!dateRange || !dateRange.startDate || !dateRange.endDate) {
        return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø–µ—Ä–∏–æ–¥. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –º—ç—Ç—á–µ–π.');
      }
      
      try {
        await ctx.answerCbQuery();
        await showAllMatches(ctx, dateRange.startDate, dateRange.endDate, page);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.');
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.action(/users_list_page_(\d+)/, async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      const page = parseInt(ctx.match[1]);
      const userId = ctx.from!.id.toString();
      const dateRange = dateRanges[userId];
      
      if (!dateRange || !dateRange.startDate || !dateRange.endDate) {
        return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø–µ—Ä–∏–æ–¥. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –º—ç—Ç—á–µ–π.');
      }
      
      try {
        await ctx.answerCbQuery();
        await showUsersWithMatches(ctx, dateRange.startDate, dateRange.endDate, page);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.');
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.action(/view_user_matches_(\d+)/, async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      const userIdToView = parseInt(ctx.match[1]);
      const userId = ctx.from!.id.toString();
      const dateRange = dateRanges[userId];
      
      if (!dateRange || !dateRange.startDate || !dateRange.endDate) {
        return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø–µ—Ä–∏–æ–¥. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –º—ç—Ç—á–µ–π.');
      }
      
      try {
        await ctx.answerCbQuery();
        ctx.session.viewingUserId = userIdToView; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await showUserMatches(ctx, userIdToView, dateRange.startDate, dateRange.endDate, 1);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.action(/user_matches_page_(\d+)/, async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      const page = parseInt(ctx.match[1]);
      const userId = ctx.from!.id.toString();
      const dateRange = dateRanges[userId];
      const userIdToView = ctx.session.viewingUserId;
      
      if (!dateRange || !dateRange.startDate || !dateRange.endDate || !userIdToView) {
        return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –º—ç—Ç—á–µ–π.');
      }
      
      try {
        await ctx.answerCbQuery();
        await showUserMatches(ctx, userIdToView, dateRange.startDate, dateRange.endDate, page);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.');
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    bot.action('back_to_users_list', async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      const userId = ctx.from!.id.toString();
      const dateRange = dateRanges[userId];
      
      if (!dateRange || !dateRange.startDate || !dateRange.endDate) {
        return ctx.answerCbQuery('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω –ø–µ—Ä–∏–æ–¥. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –º—ç—Ç—á–µ–π.');
      }
      
      // –û—á–∏—Å—Ç–∫–∞ ID –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      delete ctx.session.viewingUserId;
      
      try {
        await ctx.answerCbQuery();
        await showUsersWithMatches(ctx, dateRange.startDate, dateRange.endDate, 1);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –º—ç—Ç—á–µ–π
    bot.action('back_to_match_menu', async (ctx) => {
      if (!ctx.session.isAdmin) {
        return ctx.answerCbQuery('–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
      }
      
      try {
        await ctx.answerCbQuery();
        await ctx.reply(
          '–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—ç—Ç—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          KeyboardBuilder.matchMenu()
        );
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é –º—ç—Ç—á–µ–π:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –º–µ–Ω—é –º—ç—Ç—á–µ–π.');
      }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ noop –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)
    bot.action('noop', (ctx) => ctx.answerCbQuery());
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç
    bot.on('text', async (ctx, next) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω –∏–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—á–µ–π
      if (!ctx.session.isAdmin || !ctx.session.matchAction) {
        return next();
      }
      
      const text = ctx.message.text;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
      if (
        text === 'üîô –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é –º—ç—Ç—á–µ–π' ||
        text === 'üîÑ –ó–∞–º—ç—Ç—á–∏—Ç—å –ø–µ—Ä–∏–æ–¥' ||
        text === 'üìã –°–ø–∏—Å–æ–∫ –º—ç—Ç—á–µ–π' ||
        text === 'üë• –ú—ç—Ç—á–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º' ||
        text === 'üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∞'
      ) {
        return next();
      }
      
      const userId = ctx.from!.id.toString();
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
      if (ctx.session.matchAction === 'waiting_start_date' ||
          ctx.session.matchAction === 'list_matches_start_date' ||
          ctx.session.matchAction === 'users_matches_start_date') {
        
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        const date = parseDate(text);
        
        if (!date) {
          await ctx.reply(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º',
            KeyboardBuilder.dateRangeInputMenu()
          );
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É
        if (!dateRanges[userId]) {
          dateRanges[userId] = { startDate: null, endDate: null };
        }
        dateRanges[userId].startDate = date.toISOString();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω–µ—á–Ω–æ–π –¥–∞—Ç—ã
        if (ctx.session.matchAction === 'waiting_start_date') {
          ctx.session.matchAction = 'waiting_end_date';
        } else if (ctx.session.matchAction === 'list_matches_start_date') {
          ctx.session.matchAction = 'list_matches_end_date';
        } else if (ctx.session.matchAction === 'users_matches_start_date') {
          ctx.session.matchAction = 'users_matches_end_date';
        }
        
        await ctx.reply(
          '–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º\n' +
          '–ù–∞–ø—Ä–∏–º–µ—Ä: 31.01.2023 12:00',
          KeyboardBuilder.dateRangeInputMenu()
        );
        
      } else if (ctx.session.matchAction === 'waiting_end_date') {
        // –ü–∞—Ä—Å–∏–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        const date = parseDate(text);
        
        if (!date) {
          await ctx.reply(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º',
            KeyboardBuilder.dateRangeInputMenu()
          );
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        dateRanges[userId].endDate = date.toISOString();
        
        // –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        delete ctx.session.matchAction;
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
        await ctx.reply('‚è≥ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...');
        
        try {
          const startDate = dateRanges[userId].startDate!;
          const endDate = dateRanges[userId].endDate!;
          
          const stats = await matchTransactions(startDate, endDate);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          const startDateStr = dayjs(startDate).format('DD.MM.YYYY HH:mm');
          const endDateStr = dayjs(endDate).format('DD.MM.YYYY HH:mm');
          
          const message = [
            `‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å ${startDateStr} –ø–æ ${endDateStr} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`,
            '',
            `üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`,
            `üî¢ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.matchedCount}`,
            `üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${stats.grossExpense.toFixed(2)} —Ä—É–±.`,
            `üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.grossIncome.toFixed(2)} —Ä—É–±.`,
            `üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats.grossProfit.toFixed(2)} —Ä—É–±.`,
            `üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: ${stats.profitPercentage.toFixed(2)}%`,
            `üíº –ü—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: ${stats.profitPerOrder.toFixed(2)} —Ä—É–±.`,
            `üìâ –†–∞—Å—Ö–æ–¥ –Ω–∞ —Å–¥–µ–ª–∫—É: ${stats.expensePerOrder.toFixed(2)} —Ä—É–±.`,
          ].join('\n');
          
          await ctx.reply(message, KeyboardBuilder.matchMenu());
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', error);
          await ctx.reply(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            KeyboardBuilder.matchMenu()
          );
        }
        
      } else if (ctx.session.matchAction === 'list_matches_end_date') {
        // –ü–∞—Ä—Å–∏–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        const date = parseDate(text);
        
        if (!date) {
          await ctx.reply(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º',
            KeyboardBuilder.dateRangeInputMenu()
          );
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        dateRanges[userId].endDate = date.toISOString();
        
        // –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        delete ctx.session.matchAction;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏
        await showAllMatches(ctx, dateRanges[userId].startDate!, dateRanges[userId].endDate!);
        
      } else if (ctx.session.matchAction === 'users_matches_end_date') {
        // –ü–∞—Ä—Å–∏–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        const date = parseDate(text);
        
        if (!date) {
          await ctx.reply(
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º',
            KeyboardBuilder.dateRangeInputMenu()
          );
          return;
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É
        dateRanges[userId].endDate = date.toISOString();
        
        // –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        delete ctx.session.matchAction;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞—Ç—á–∞–º–∏
        await showUsersWithMatches(ctx, dateRanges[userId].startDate!, dateRanges[userId].endDate!);
      }
    });
  }
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º"
 */
function parseDate(dateStr: string): Date | null {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
  const match = dateStr.match(/^(\d{2})\.(\d{2})\.(\d{4}) (\d{1,2}):(\d{2})$/);
  
  if (!match) {
    return null;
  }
  
  const [, day, month, year, hour, minute] = match;
  
  // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date (–º–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0)
  const date = new Date(
    parseInt(year),
    parseInt(month) - 1,
    parseInt(day),
    parseInt(hour),
    parseInt(minute)
  );
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ–π
  if (isNaN(date.getTime())) {
    return null;
  }
  
  return date;
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
 */
function formatTransactionDetails(match: any): string {
  const idexTx = match.idexTransaction;
  const tx = match.transaction;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ IdexTransaction
  let idexAmount = '–ù/–î';
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ amount —Å—Ç—Ä–æ–∫–æ–π JSON
    if (typeof idexTx.amount === 'string') {
      const amountJson = JSON.parse(idexTx.amount);
      idexAmount = amountJson.trader?.[643] || '–ù/–î';
    } else {
      // –ï—Å–ª–∏ amount —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
      idexAmount = idexTx.amount.trader?.[643] || '–ù/–î';
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –ø–æ–ª—è amount:', error);
  }
  
  let idexTotal = '–ù/–î';
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ total —Å—Ç—Ä–æ–∫–æ–π JSON
    if (typeof idexTx.total === 'string') {
      const totalJson = JSON.parse(idexTx.total);
      idexTotal = totalJson.trader?.[643] || '–ù/–î';
    } else {
      // –ï—Å–ª–∏ total —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
      idexTotal = idexTx.total.trader?.[643] || '–ù/–î';
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –ø–æ–ª—è total:', error);
  }
  
  return [
    `üÜî ID –º—ç—Ç—á–∞: ${match.id}`,
    `‚è± –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏: ${(match.timeDifference / 60).toFixed(1)} –º–∏–Ω.`,
    '',
    `üì± IDEX —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:`,
    `üî¢ External ID: ${idexTx.externalId}`,
    `üí∞ –°—É–º–º–∞: ${idexAmount}`,
    `üíµ –ò—Ç–æ–≥–æ: ${idexTotal}`,
    `üìä –°—Ç–∞—Ç—É—Å: ${idexTx.status}`,
    `üìÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: ${idexTx.approvedAt || '–ù/–î'}`,
    '',
    `üíº –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è P2P:`,
    `üî¢ External ID: ${tx.externalId || '–ù/–î'}`,
    `üìù Order ‚Ññ: ${tx.orderNo || '–ù/–î'}`,
    `üìÖ –î–∞—Ç–∞: ${dayjs(tx.dateTime).format('DD.MM.YYYY HH:mm')}`,
    `üìä –¢–∏–ø: ${tx.type}`,
    `üí∞ –ê–∫—Ç–∏–≤: ${tx.asset}`,
    `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${tx.amount}`,
    `üíµ –û–±—â–∞—è —Ü–µ–Ω–∞: ${tx.totalPrice}`,
    `üíπ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${tx.unitPrice}`,
    `üë§ –ö–æ–Ω—Ç—Ä–∞–≥–µ–Ω—Ç: ${tx.counterparty || '–ù/–î'}`,
    `üìä –°—Ç–∞—Ç—É—Å: ${tx.status}`,
    '',
    `${Number(match.grossProfit) < 0 ? 'üî¥ ' : 'üü¢ ' }üíµ –ü—Ä–∏–±—ã–ª—å: ${match.grossProfit.toFixed(2)} USDT. (${match.profitPercentage.toFixed(2)}%)`,
  ].join('\n');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
function formatStats(stats: any): string {
  return [
    `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`,
    `üî¢ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${stats.matchedCount}`,
    `üí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${stats.grossExpense.toFixed(2)} —Ä—É–±.`,
    `üíµ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${stats.grossIncome.toFixed(2)} —Ä—É–±.`,
    `üìà –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${stats.grossProfit.toFixed(2)} —Ä—É–±.`,
    `üìä –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: ${stats.profitPercentage.toFixed(2)}%`,
    `üíº –ü—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: ${stats.profitPerOrder.toFixed(2)} —Ä—É–±.`,
    `üìâ –†–∞—Å—Ö–æ–¥ –Ω–∞ —Å–¥–µ–ª–∫—É: ${stats.expensePerOrder.toFixed(2)} —Ä—É–±.`,
  ].join('\n');
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
 */
async function showAllMatches(ctx: BotContext, startDate: string, endDate: string, page = 1) {
  try {
    const result = await getAllMatches(startDate, endDate, page);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const startDateStr = dayjs(startDate).format('DD.MM.YYYY HH:mm');
    const endDateStr = dayjs(endDate).format('DD.MM.YYYY HH:mm');
    
    if (result.matches.length === 0) {
      await ctx.reply(
        `–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å ${startDateStr} –ø–æ ${endDateStr} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.`,
        {
          reply_markup: KeyboardBuilder.backToMatchMenu().reply_markup
        }
      );
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await ctx.reply(
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å ${startDateStr} –ø–æ ${endDateStr}:\n\n` +
      formatStats(result.stats)
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    for (const match of result.matches) {
      await ctx.reply(
        formatTransactionDetails(match)
      );
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const paginationMarkup = KeyboardBuilder.allMatchesPagination(result.currentPage, result.totalPages);
    const backMarkup = KeyboardBuilder.backToMatchMenu();
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    const combinedButtons = [
      ...(paginationMarkup.reply_markup?.inline_keyboard || []),
      ...(backMarkup.reply_markup?.inline_keyboard || [])
    ];
    
    await ctx.reply(
      `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${result.currentPage} –∏–∑ ${result.totalPages}`,
      {
        reply_markup: {
          inline_keyboard: combinedButtons
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º—ç—Ç—á–µ–π.');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞—Ç—á–∞–º–∏
 */
async function showUsersWithMatches(ctx: BotContext, startDate: string, endDate: string, page = 1) {
  try {
    const result = await getUsersWithMatchStats(startDate, endDate, page);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const startDateStr = dayjs(startDate).format('DD.MM.YYYY HH:mm');
    const endDateStr = dayjs(endDate).format('DD.MM.YYYY HH:mm');
    
    if (result.users.length === 0) {
      await ctx.reply(
        `–ó–∞ –ø–µ—Ä–∏–æ–¥ —Å ${startDateStr} –ø–æ ${endDateStr} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.`,
        {
          reply_markup: KeyboardBuilder.backToMatchMenu().reply_markup
        }
      );
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await ctx.reply(
      `üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å ${startDateStr} –ø–æ ${endDateStr}:\n\n` +
      formatStats(result.totalStats)
    );
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userListMessage = [
      `üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º—ç—Ç—á–∞–º–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${result.currentPage} –∏–∑ ${result.totalPages}):`,
      '',
      ...result.users.map((user, index) => 
        `${index + 1}. ${user.name} - ${user.matchCount} –º—ç—Ç—á–µ–π, –ø—Ä–∏–±—ã–ª—å: ${user.stats.grossProfit.toFixed(2)} —Ä—É–±. (${user.stats.profitPercentage.toFixed(2)}%)`
      )
    ].join('\n');
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç—á–µ–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.reply(
      userListMessage,
      {
        reply_markup: KeyboardBuilder.userListWithViewButtons(result.users).reply_markup
      }
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const paginationMarkup = KeyboardBuilder.usersListPagination(result.currentPage, result.totalPages);
    const backMarkup = KeyboardBuilder.backToMatchMenu();
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    const combinedButtons = [
      ...(paginationMarkup.reply_markup?.inline_keyboard || []),
      ...(backMarkup.reply_markup?.inline_keyboard || [])
    ];
    
    await ctx.reply(
      `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${result.currentPage} –∏–∑ ${result.totalPages}`,
      {
        reply_markup: {
          inline_keyboard: combinedButtons
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∞—Ç—á–∞–º–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º—ç—Ç—á–∞–º–∏.');
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–∞—Ç—á–µ–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function showUserMatches(ctx: BotContext, userId: number, startDate: string, endDate: string, page = 1) {
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    const user = await getUserById(userId);
    
    if (!user) {
      await ctx.reply(
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.',
        {
          reply_markup: KeyboardBuilder.backToUsersList().reply_markup
        }
      );
      return;
    }
    
    const result = await getUserMatches(userId, startDate, endDate, page);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const startDateStr = dayjs(startDate).format('DD.MM.YYYY HH:mm');
    const endDateStr = dayjs(endDate).format('DD.MM.YYYY HH:mm');
    
    if (result.matches.length === 0) {
      await ctx.reply(
        `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name} –Ω–µ—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å ${startDateStr} –ø–æ ${endDateStr}.`,
        {
          reply_markup: KeyboardBuilder.backToUsersList().reply_markup
        }
      );
      return;
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await ctx.reply(
      `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.name} –∑–∞ –ø–µ—Ä–∏–æ–¥ —Å ${startDateStr} –ø–æ ${endDateStr}:\n\n` +
      formatStats(result.stats)
    );
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Ç—á–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    for (const match of result.matches) {
      await ctx.reply(
        formatTransactionDetails(match)
      );
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const paginationMarkup = KeyboardBuilder.userMatchesPagination(result.currentPage, result.totalPages);
    const backMarkup = KeyboardBuilder.backToUsersList();
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    const combinedButtons = [
      ...(paginationMarkup.reply_markup?.inline_keyboard || []),
      ...(backMarkup.reply_markup?.inline_keyboard || [])
    ];
    
    await ctx.reply(
      `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${result.currentPage} –∏–∑ ${result.totalPages}`,
      {
        reply_markup: {
          inline_keyboard: combinedButtons
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –º–∞—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º—ç—Ç—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
  }
}