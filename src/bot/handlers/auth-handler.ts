import { Context } from 'telegraf';
import { message } from 'telegraf/filters';
import { BotContext } from '@/types';
import { UserService } from '@/services/user-service';
import { AdminService } from '@/services/admin-service';
import { KeyboardBuilder } from '../components/keyboard';

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export class AuthHandler {
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ Telegraf
   */
  static init(bot: any) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–≤–µ—Å—Ç–∏ –∫–æ–¥"
    bot.hears('üîë –í–≤–µ—Å—Ç–∏ –∫–æ–¥', this.startAuthProcess);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞-–ø–∞—Ä–æ–ª—è
    bot.on(message('text'), this.handlePassCode);
  }
  
  /**
   * –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  static async startAuthProcess(ctx: BotContext) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!ctx.session) {
      ctx.session = {};
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–∂–∏–¥–∞–µ—Ç –∫–æ–¥"
    ctx.session.lastAction = 'waiting_auth_code';
    
    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥-–ø–∞—Ä–æ–ª—å –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.',
      KeyboardBuilder.cancelKeyboard()
    );
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞-–ø–∞—Ä–æ–ª—è
   */
  private static async handlePassCode(ctx: BotContext, next: () => Promise<void>) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!ctx.session) {
      ctx.session = {};
    }
    
    // –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
    if (ctx.session.lastAction !== 'waiting_auth_code') {
      return next();
    }
    
    // –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∞') {
      ctx.session.lastAction = undefined;
      await ctx.reply(
        '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        KeyboardBuilder.mainMenu()
      );
      return;
    }
    
    const passCode = ctx.message.text;
    
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
    const user = await UserService.findUserByPassCode(passCode);
    
    if (!user) {
      await ctx.reply(
        '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥-–ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
        KeyboardBuilder.cancelKeyboard()
      );
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!user.isActive) {
      await ctx.reply(
        '–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.',
        KeyboardBuilder.mainMenu()
      );
      ctx.session.lastAction = undefined;
      return;
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID –≤ —Å–µ—Å—Å–∏–∏
    ctx.session.userId = user.id;
    ctx.session.lastAction = undefined;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ —Å–≤—è–∑–∞–Ω
    await UserService.addTelegramAccount(
      user.id,
      ctx.from.id.toString(),
      ctx.from.username,
      ctx.from.first_name,
      ctx.from.last_name
    );
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    const isAdmin = await AdminService.isAdmin(ctx.from.id.toString());
    ctx.session.isAdmin = isAdmin;
    
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
    if (isAdmin) {
      await ctx.reply(
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`,
        KeyboardBuilder.adminMainMenu()
      );
    } else {
      await ctx.reply(
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.`,
        KeyboardBuilder.mainMenu()
      );
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
   */
  static async checkAuth(ctx: BotContext, next: () => Promise<void>) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!ctx.session) {
      ctx.session = {};
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!ctx.session.userId) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫–∫–∞—É–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
      const userByTelegram = await UserService.findUserByTelegramId(ctx.from.id.toString());
      
      // –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –Ω–∞–π–¥–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º
      if (userByTelegram) {
        ctx.session.userId = userByTelegram.id;
        ctx.session.isAdmin = await AdminService.isAdmin(ctx.from.id.toString());
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –±–∞–∑–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–º—É –≤–≤–µ—Å—Ç–∏ –∫–æ–¥-–ø–∞—Ä–æ–ª—å
        await ctx.reply(
          '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥-–ø–∞—Ä–æ–ª—å.',
          KeyboardBuilder.mainMenu()
        );
        return;
      }
    }
    
    return next();
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
   * @param ctx –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
   */
  static async checkAdmin(ctx: BotContext, next: () => Promise<void>) {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!ctx.session) {
      ctx.session = {};
    }
    
    if (!ctx.session.isAdmin) {
      await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
      return;
    }
    
    return next();
  }
}
