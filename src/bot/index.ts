import { Telegraf, session } from 'telegraf';
import { message } from 'telegraf/filters';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';
import { parseCSVBuffer } from '@/services/csv-parser';
import { formatTransactionData } from '@/utils/message-formatter';
import { UserService } from '@/services/user-service';
import { AdminService } from '@/services/admin-service';
import { BotContext } from '@/types';
import { KeyboardBuilder } from './components/keyboard';
import { AuthHandler } from './handlers/auth-handler';
import { ReportHandler } from './handlers/report-handler';
import { WorkSessionHandler } from './handlers/work-session-handler';
import { MenuHandler } from './handlers/menu-handler';
import { AdminHandler } from './handlers/admin-handler';
import { MatchHandler } from './handlers/match-handler';

// Create and configure bot
export function createBot(token: string) {
  const bot = new Telegraf<BotContext>(token);
  
  // Use session middleware
  bot.use(session({
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    ttl: 24 * 60 * 60 * 1000, // —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏ (24 —á–∞—Å–∞)
    getSessionKey: (ctx) => {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –∫–ª—é—á —Å–µ—Å—Å–∏–∏
      return ctx.from?.id.toString();
    },
  }));
  
  // Initialize handlers
  AuthHandler.init(bot);
  ReportHandler.init(bot);
  WorkSessionHandler.init(bot);
  MenuHandler.init(bot);
  AdminHandler.init(bot);
  MatchHandler.init(bot);

  // Command handlers
  bot.start(async (ctx) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    const isAdmin = await AdminService.isAdmin(ctx.from.id.toString());
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    if (isAdmin) {
      // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      let user = await UserService.findUserByTelegramId(ctx.from.id.toString());
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ –∏–º–µ–Ω–∏
      if (!user) {
        const name = ctx.from.first_name + (ctx.from.last_name ? ` ${ctx.from.last_name}` : '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        const usersWithTelegramAccounts = await UserService.getUsersWithTelegramAccounts();
        
        // –ò—â–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Ä–µ–¥–∏ –Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–æ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
        let existingUser = null;
        for (const u of usersWithTelegramAccounts) {
          if (u.telegramAccounts.some(account => account.telegramId === ctx.from.id.toString())) {
            existingUser = u;
            break;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–æ–º –∞–¥–º–∏–Ω–∞
        if (existingUser) {
          user = existingUser;
          console.log(`–ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–º —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–æ–º: ${name} (${ctx.from.id})`);
        } else {
          // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Ç–µ–ª–µ–≥—Ä–∞–º ID, –∏—â–µ–º –ø–æ –∏–º–µ–Ω–∏ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          const existingUsers = await UserService.getAllUsers();
          const adminUser = existingUsers.find(u => u.name === name);
          
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ
          if (adminUser) {
            user = adminUser;
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await UserService.addTelegramAccount(
              user.id,
              ctx.from.id.toString(),
              ctx.from.username,
              ctx.from.first_name,
              ctx.from.last_name
            );
            console.log(`–ü—Ä–∏–≤—è–∑–∞–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${name} (${ctx.from.id})`);
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –ø–æ —Ç–µ–ª–µ–≥—Ä–∞–º ID, –Ω–∏ –ø–æ –∏–º–µ–Ω–∏
            user = await UserService.createUser(name);
            
            if (user) {
              // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
              await UserService.addTelegramAccount(
                user.id,
                ctx.from.id.toString(),
                ctx.from.username,
                ctx.from.first_name,
                ctx.from.last_name
              );
              
              console.log(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: ${name} (${ctx.from.id})`);
            }
          }
        }
      }
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é
      ctx.session.userId = user?.id;
      ctx.session.isAdmin = true;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      await ctx.reply(
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user?.name || ctx.from.first_name}! üìä\n\n` +
        '–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:',
        KeyboardBuilder.adminMainMenu()
      );
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∏—Ö —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
      const user = await UserService.findUserByTelegramId(ctx.from.id.toString());
      
      if (user) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –º–µ–Ω—é
        ctx.session.userId = user.id;
        ctx.session.isAdmin = false;
        
        await ctx.reply(
          `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}! üìä\n\n` +
          '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:',
          KeyboardBuilder.mainMenu()
        );
      } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
        await ctx.reply(
          '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ P2P Transaction Analyzer Bot! üìä\n\n' +
          '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥-–ø–∞—Ä–æ–ª—å:',
          KeyboardBuilder.mainMenu()
        );
      }
    }
  });
  
  bot.help((ctx) => {
    ctx.reply(
      'P2P Transaction Analyzer Bot Help üìã\n\n' +
      '–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç CSV —Ñ–∞–π–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π P2P —Ä—ã–Ω–∫–∞.\n\n' +
      '–ö–æ–º–∞–Ω–¥—ã:\n' +
      '/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –º–µ–Ω—é\n' +
      '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏\n\n' +
      '–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n' +
      '1. –ü–µ—Ä–µ—à–ª–∏—Ç–µ CSV —Ñ–∞–π–ª –∏–∑ –±–æ—Ç–∞ @wallet\n' +
      '2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n\n' +
      '–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞ @wallet.'
    );
  });
  
  // Handle document/file messages
  bot.on(message('document'), async (ctx) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (!ctx.session.userId) {
        return ctx.reply(
          '–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–æ–¥-–ø–∞—Ä–æ–ª—å.',
          KeyboardBuilder.mainMenu()
        );
      }

      const { document } = ctx.message;
      
      // Log complete message for debugging
      console.log('Complete message object:', JSON.stringify(ctx.message, null, 2));
      
      // Check if the message is a forward from wallet bot
      const forwardFrom = ctx.message.forward_from;
      const forwardOrigin = (ctx.message as any).forward_origin; // Telegram API sometimes uses forward_origin
      
      // Extract forwarded info
      const isForwarded = !!forwardFrom || !!forwardOrigin;
      const forwardedFromUsername = forwardFrom?.username?.toLowerCase();
      const forwardedFromFirstName = forwardFrom?.first_name?.toLowerCase();
      
      // Additional forward_origin check (in newer Telegram API versions)
      const forwardOriginType = forwardOrigin?.type;
      const forwardOriginUser = forwardOrigin?.sender_user;
      const forwardOriginUsername = forwardOriginUser?.username?.toLowerCase();
      const forwardOriginFirstName = forwardOriginUser?.first_name?.toLowerCase();
      
      // Check message caption (often contains transaction history information)
      const messageCaption = ctx.message.caption?.toLowerCase();
      
      console.log('Forward validation info:', {
        isForwarded,
        forwardedFromUsername,
        forwardedFromFirstName,
        forwardOriginType,
        forwardOriginUsername,
        forwardOriginFirstName,
        messageCaption: messageCaption?.substring(0, 50)
      });
      
      // Also check if the message is a reply from a wallet bot (our previous case)
      const replyMessage = ctx.message.reply_to_message;
      const isReply = !!replyMessage;
      const replyFrom = replyMessage?.from;
      const replyForwardFrom = replyMessage?.forward_from;
      
      // Reply validation values
      const replyFromUsername = replyFrom?.username?.toLowerCase();
      const replyFromFirstName = replyFrom?.first_name?.toLowerCase();
      const replyForwardFromUsername = replyForwardFrom?.username?.toLowerCase();
      const replyForwardFromFirstName = replyForwardFrom?.first_name?.toLowerCase();
      const replyText = replyMessage?.text?.toLowerCase();
      
      console.log('Reply validation info:', {
        isReply,
        replyFromUsername,
        replyFromFirstName,
        replyForwardFromUsername,
        replyForwardFromFirstName,
        replyTextPreview: replyText?.substring(0, 50)
      });
      
      // Check if the message appears to be from wallet bot, either as a forward or a reply
      const isFromWalletBot = (
        // Forwarded message checks
        (isForwarded && (
          // Direct username match
          forwardedFromUsername === 'wallet' ||
          forwardOriginUsername === 'wallet' ||
          
          // Name contains wallet
          (forwardedFromFirstName && forwardedFromFirstName.includes('wallet')) ||
          (forwardOriginFirstName && forwardOriginFirstName.includes('wallet')) ||
          
          // Caption contains wallet-related keywords
          (messageCaption && (
            messageCaption.includes('–∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫') ||
            messageCaption.includes('transaction history') ||
            messageCaption.includes('p2p') ||
            messageCaption.includes('csv') ||
            messageCaption.includes('wallet')
          ))
        )) ||
        
        // Reply message checks (from previous implementation)
        (isReply && (
          // Direct username match
          replyFromUsername === 'wallet' ||
          replyForwardFromUsername === 'wallet' ||
          
          // Username contains wallet
          (replyFromUsername && replyFromUsername.includes('wallet')) ||
          (replyForwardFromUsername && replyForwardFromUsername.includes('wallet')) ||
          
          // First name contains wallet
          (replyFromFirstName && replyFromFirstName.includes('wallet')) ||
          (replyForwardFromFirstName && replyForwardFromFirstName.includes('wallet')) ||
          
          // Text contains wallet-related keywords
          (replyText && (
            replyText.includes('–∏—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫') ||  // Russian: "transaction history"
            replyText.includes('transaction history') ||
            replyText.includes('p2p') ||
            replyText.includes('csv') ||
            replyText.includes('wallet') ||
            replyText.includes('–±–∏—Ä–∂–∞') ||  // Russian: "exchange"
            replyText.includes('exchange')
          ))
        ))
      );
      
      console.log('Is message from @wallet bot?', isFromWalletBot);
      
      // Only continue if the message appears to be from the wallet bot
      if (!isFromWalletBot) {
        return ctx.reply(
          '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –º–æ–≥—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ CSV —Ñ–∞–π–ª—ã, –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –∏–∑ –±–æ—Ç–∞ @wallet.\n\n' +
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—É—á–∏—Ç–µ –≤–∞—à CSV —Ñ–∞–π–ª –∏–∑ –±–æ—Ç–∞ @wallet –∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –µ–≥–æ –º–Ω–µ.',
          ctx.session.isAdmin ? KeyboardBuilder.adminMainMenu() : KeyboardBuilder.mainMenu()
        );
      }
      
      // Make sure it's a CSV file
      if (!document.file_name?.toLowerCase().endsWith('.csv')) {
        return ctx.reply(
          '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π CSV —Ñ–∞–π–ª –∏–∑ –±–æ—Ç–∞ @wallet. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv.',
          ctx.session.isAdmin ? KeyboardBuilder.adminMainMenu() : KeyboardBuilder.mainMenu()
        );
      }
      
      // Notify the user we're processing
      await ctx.reply('üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞—à–µ–≥–æ CSV —Ñ–∞–π–ª–∞...');
      
      // Get file from Telegram servers
      const fileLink = await ctx.telegram.getFileLink(document.file_id);
      console.log('Downloaded file from:', fileLink.toString());
      const response = await fetch(fileLink.toString());
      
      if (!response.ok) {
        throw new Error(`Failed to download file: ${response.statusText}`);
      }
      
      const buffer = await response.arrayBuffer();
      
      // Save the original CSV to a temporary file for debugging
      try {
        const tempDir = os.tmpdir();
        const tempFilePath = path.join(tempDir, `p2p_debug_${Date.now()}.csv`);
        fs.writeFileSync(tempFilePath, Buffer.from(buffer));
        console.log(`Saved original CSV to: ${tempFilePath}`);
        
        // Read the first few lines of the CSV for column detection
        const csvPreview = Buffer.from(buffer).toString('utf8').split('\n').slice(0, 3).join('\n');
        console.log('CSV Preview (first 3 lines):', csvPreview);
      } catch (err) {
        console.error('Error saving debug file:', err);
      }
      
      // Parse the CSV data
      console.log('Starting CSV parsing...');
      const parsedData = await parseCSVBuffer(Buffer.from(buffer));
      console.log(`Parsed ${parsedData.transactions.length} transactions`);
      
      if (parsedData.transactions.length > 0) {
        console.log('First transaction:', JSON.stringify(parsedData.transactions[0]));
        console.log('Last transaction:', JSON.stringify(parsedData.transactions[parsedData.transactions.length - 1]));
      }
      
      // Format and send the results
      const message = formatTransactionData(parsedData);
      await ctx.reply(message, { 
        parse_mode: 'Markdown',
        reply_markup: ctx.session.isAdmin ? KeyboardBuilder.adminMainMenu().reply_markup : KeyboardBuilder.mainMenu().reply_markup
      });
    } catch (error) {
      console.error('Error processing file:', error);
      ctx.reply(
        `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV —Ñ–∞–π–ª–∞: ${(error as Error).message}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º CSV —Ñ–∞–π–ª–æ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.`,
        ctx.session.isAdmin ? KeyboardBuilder.adminMainMenu() : KeyboardBuilder.mainMenu()
      );
    }
  });
  
  // Handle regular messages
  bot.on('text', async (ctx) => {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
    if (ctx.session.lastAction === 'waiting_auth_code') {
      return;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è IDEX –∫–∞–±–∏–Ω–µ—Ç–∞
    if (ctx.session.idexCabinetStep === 'waiting_idex_id') {
      await MenuHandler.handleIdexCabinetId(ctx, ctx.message.text);
      return;
    } else if (ctx.session.idexCabinetStep === 'waiting_login') {
      await MenuHandler.handleIdexCabinetLogin(ctx, ctx.message.text);
      return;
    } else if (ctx.session.idexCabinetStep === 'waiting_password') {
      await MenuHandler.handleIdexCabinetPassword(ctx, ctx.message.text);
      return;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
    if (!ctx.session.userId && !ctx.message.text.startsWith('/')) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
      const isAdmin = await AdminService.isAdmin(ctx.from.id.toString());
      
      if (isAdmin) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–∞–Ω–Ω—ã–º Telegram ID
        let user = await UserService.findUserByTelegramId(ctx.from.id.toString());
        
        if (user) {
          // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
          ctx.session.userId = user.id;
          ctx.session.isAdmin = true;
          
          await ctx.reply(
            `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${user.name}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`,
            KeyboardBuilder.adminMainMenu()
          );
        } else {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
          const name = ctx.from.first_name + (ctx.from.last_name ? ` ${ctx.from.last_name}` : '');
          const existingUsers = await UserService.getAllUsers();
          const adminUser = existingUsers.find(u => u.name === name);
          
          if (adminUser) {
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await UserService.addTelegramAccount(
              adminUser.id,
              ctx.from.id.toString(),
              ctx.from.username,
              ctx.from.first_name,
              ctx.from.last_name
            );
            
            ctx.session.userId = adminUser.id;
            ctx.session.isAdmin = true;
            
            await ctx.reply(
              `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${adminUser.name}! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`,
              KeyboardBuilder.adminMainMenu()
            );
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç
            const newUser = await UserService.createUser(name);
            
            if (newUser) {
              await UserService.addTelegramAccount(
                newUser.id,
                ctx.from.id.toString(),
                ctx.from.username,
                ctx.from.first_name,
                ctx.from.last_name
              );
              
              ctx.session.userId = newUser.id;
              ctx.session.isAdmin = true;
              
              await ctx.reply(
                `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${newUser.name}! –í—ã –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`,
                KeyboardBuilder.adminMainMenu()
              );
            }
          }
        }
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await AuthHandler.startAuthProcess(ctx);
      }
      return;
    }
    
    // Log text messages for debugging
    console.log('Text message received:', ctx.message.text);
    console.log('From:', ctx.message.from);
    
    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –¥–∞–ª—å—à–µ
    return;
  });
  
  return bot;
}
